查找源代码--光标移到单词，再command加左键

ag-grid是Grid控件，系统模块中的表单是通过这个控件实现的。必须非常了解这个控件
https://www.ag-grid.com/
如何显示记录
如何更新数据之后刷新界面
如何分页显示数据
如何操作当个单元格
如何在地编辑数据

1.事件函数通过在“on”前加上事件名称（驼峰命名法）
2.列中定义filter在可筛选想要的,pinned列固定

?
列组定义时不能合并行
defaultColGroupDef没改掉





/**
 * Created by Mac on 2018/1/4.
 */

import React, {Component} from 'react';
import {AgGridColumn, AgGridReact } from 'ag-grid-react';
import 'ag-grid/dist/styles/ag-grid.css';
import 'ag-grid/dist/styles/ag-theme-dark.css';
import 'ag-grid/dist/styles/ag-theme-fresh.css';
import './AgGrid.css';

function setText(selector, text) {
    document.querySelector(selector).innerHTML = text;
}
function setLastButtonDisabled(disabled) {
    document.querySelector("#btLast").disabled = disabled;
}

function rowDataFactory(data) {
    const rowData = [];
    for(let i = 0; i < data.length; i++){
        rowData.push(
            {
                make:data[i],
                model:Math.random(),
                price: new Date(),
                more: Math.random()
            }
        );
    }
    console.log(rowData);
    return rowData;
}

function headerClassFunc(params) {  //失败
    var foundA = false;
    var foundB = false;
    var item = params.column ? params.column : params.columnGroup;
    while (item) {
        if (item.getDefinition().groupId === "GroupA") {
            foundA = true;
        } else if (item.getDefinition().groupId === "GroupB") {
            foundB= true;
        }
        item = item.getParent();
    }
    if (foundB) {
        return "column-group-a";
    } else if (foundA) {
        return "column-group-b";
    } else {
        return null;
    }
}


class AgGrid extends Component {
    constructor() {
        super();
        this.state = {
            rowData: [
                {make: "Toyota", model: "Celica", price: 35000},
                {make: "Ford", model: "Mondeo", price: 32000},
                {make: "Porsche", model: "Boxter", price: 72000},
                {make: "Toyota", model: "Celica", price: 35000},
                {make: "Ford", model: "Mondeo", price: 32000},
                {make: "Toyota", model: "Celica", price: 35000},
                {make: "Ford", model: "Mondeo", price: 32000},
                {make: "Porsche", model: "Boxter", price: 72000},
                {make: "Toyota", model: "Celica", price: 35000},
                {make: "Ford", model: "Mondeo", price: 32000},
                {make: "Toyota", model: "Celica", price: 35000},
                {make: "Ford", model: "Mondeo", price: 32000},
                {make: "Porsche", model: "Boxter", price: 72000},
                {make: "Toyota", model: "Celica", price: 35000},
                {make: "Ford", model: "Mondeo", price: 32000},
                {make: "Ford", model: "Mondeo", price: 32000},
                {make: "Porsche", model: "Boxter", price: 72000},
                {make: "Toyota", model: "Celica", price: 35000},
                {make: "Ford", model: "Mondeo", price: 32000},
                {make: "Toyota", model: "Celica", price: 35000},
                {make: "Ford", model: "Mondeo", price: 32000},
                {make: "Porsche", model: "Boxter", price: 72000},
                {make: "Toyota", model: "Celica", price: 35000},
                {make: "Ford", model: "Mondeo", price: 32000},
                {make: "Toyota", model: "Celica", price: 35000},
                {make: "Ford", model: "Mondeo", price: 32000},
                {make: "Porsche", model: "Boxter", price: 72000},
                {make: "Toyota", model: "Celica", price: 35000},
                {make: "Ford", model: "Mondeo", price: 32000},
                {make: "Toyota", model: "Celica", price: 35000},
                {make: "Ford", model: "Mondeo", price: 32000},
                {make: "Porsche", model: "Boxter", price: 72000},
                {make: "Toyota", model: "Celica", price: 35000},
                {make: "Ford", model: "Mondeo", price: 32000},
                {make: "Toyota", model: "Celica", price: 35000},
                {make: "Ford", model: "Mondeo", price: 32000},
                {make: "Porsche", model: "Boxter", price: 72000},
                {make: "Toyota", model: "Celica", price: 35000},
                {make: "Ford", model: "Mondeo", price: 32000},
                {make: "Ford", model: "Mondeo", price: 32000},
                {make: "Porsche", model: "Boxter", price: 72000},
                {make: "Toyota", model: "Celica", price: 35000},
                {make: "Ford", model: "Mondeo", price: 32000},
                {make: "Toyota", model: "Celica", price: 35000},
                {make: "Ford", model: "Mondeo", price: 32000},
                {make: "Porsche", model: "Boxter", price: 72000},
                {make: "Toyota", model: "Celica", price: 35000},
                {make: "Ford", model: "Mondeo", price: 32000},
                {make: "Toyota", model: "Celica", price: 35000},
                {make: "Ford", model: "Mondeo", price: 32000},
                {make: "Porsche", model: "Boxter", price: 72000},
                {make: "Toyota", model: "Celica", price: 35000},
                {make: "Ford", model: "Mondeo", price: 32000},
                {make: "Porsche", model: "Boxter", price: 72000},
                {make: 1234, model: "Boxter", price: 93000},
                {make: 123, model: "Boxter", price: 80000}
            ],
            columnDefs: [
                {
                    headerName: 'GROUP A',
                    groupId: "GroupA",
                    children: [{field: "make", pinned: 'left',filter: "agNumberColumnFilter", type: 'makeid'},
                        {field: 'model', width: 120,filter: "agTextColumnFilter"},
                        {field: 'price', width: 120,filter: "agTextColumnFilter"}}
                    ] //可以展开组 suppressFilter: true
                }, //列组定义
                {
                    headerName: 'GROUP B',
                    groupId: "GroupB",
                    marryChildren: true,  //始终让小组专栏粘在一起
                    children: [
                        {field: "make", filter: "number", type: 'makeid'},
                        {field: "price", filter: "number", columnGroupShow: 'closed'},
                        {field: 'model', width: 120, columnGroupShow: 'open'}] //可以展开组
                },
                {headerName: "Make", field: "make"},
                {headerName: "Model", field: "model"},
                {headerName: "Price", field: "price"}
            ],
            refrow: [
                "Beckham", "Black", "Braxton", "Brennan", "Brock", "Bryson", "Cadwell",
                "Cage", "Carson", "Chandler", "Cohen", "Cole", "Corbin", "Dallas", "Dalton", "Dane",
                "Donovan", "Easton", "Fisher", "Fletcher", "Grady", "Greyson", "Griffin", "Gunner",
                "Hayden", "Hudson", "Hunter", "Jacoby", "Jagger", "Jaxon", "Jett", "Kade", "Kane",
                "Keating", "Keegan", "Kingston", "Kobe"
            ],
            defaultColDef: {editable: true, width: 200},
            columnTypes: {
                makeid: {
                    width: 120,
                    filter: "agNumberColumnFilter" //数字过滤
                }
            },
            defaultColGroupDef: {headerClass: headerClassFunc},
            defaultColDef: {headerClass: headerClassFunc,width: 90},
            groupHeaderHeight: 35,
            headerHeight: 60 ,
            pivotGroupHeaderHeight: 50,
            pivotHeaderHeight: 60
        };

    }

    render() {
        return (
            <div>
              <h2>AgGrid表格</h2>
              <div  style={{height:300}} className="ag-theme-dark">
                  <AgGridReact
                      id="myGrid1"
                      rowData={rowDataFactory(this.state.refrow)} //行定义数组
                      //columnDefs={this.state.columnDefs} //列定义数组
                      suppressMovableColumns="false"  //true为列不能移动
                      suppressMenuHide="false" //true为列菜单按钮始终显示
                      enableColResize="true" //true为标题边缘处可拖动调整列
                      enableSorting="true" //true启动行排序
                      enableFilter="true"   //true启动行过滤
                      enableRangeSelection={true}//鼠标拖拽可有范围选取
                      suppressRowClickSelection={false}  //true为点击行不发生行选择
                      //singleClickEdit={true} //true为点击可编辑和defaultColDef一起用
                      //defaultColDef={this.state.defaultColDef}

                      // suppressClickEdit={true}
                      headerHeight="26" //头部的高度，不设置默认为25px
                      rowSelection="multiple" //行选择类型
                      suppressColumnVirtualisation={true} //true为网格不虚拟化，全部都呈现
                      rowHeight="22" // 行高
                      pagination={true} //true为开启分页
                      paginationPageSize="15" //每页加载多少行
                      onPaginationChanged={this.onPaginationChanged}
                      maxBlocksInCache="5" //缓存多少页
                      //suppressScrollOnNewData={true} //网格在页面更改时不滚动到顶部
                      suppressPaginationPanel={true} //网格将不会显示用于分页的标准导航控件
                      //icon自定义 icons={{'menu':'<img src="https://cdn.rawgit.com/ag-grid/ag-grid-docs/56853d5aa6513433f77ac3f808a4681fdd21ea1d/src/javascript-grid-icons/plus.png" style="width: 12px;padding-right: 2px">'}}
                      rowClassRules={{'breach': 'data.price > 60000'}} //包含某些CSS类
                      overlayNoRowsTemplate={'<span>请稍后。。。</span>'}  //提供'无行'覆盖的模板
                      onGridReady={this.onGridReady}  //ag-Grid已经初始化了,网格的API将列固定到大小
                      valueCacheNeverExpires="true"  //数据更新后不会过期。

                      onBodyScroll={this.onbodyScroll}   //滚动事件
                      onCellClicked={this.onCellClicked} //单击事件
                      onRowDataChanged={this.onRowDataChange}
                      animateRows={true} //点击排序有动画效果
                  >
                      <AgGridColumn field="make"></AgGridColumn>
                      <AgGridColumn field="model"></AgGridColumn>
                      <AgGridColumn
                          field="price"
                          cellClass="price"
                      ></AgGridColumn>
                      <AgGridColumn
                          field="more"
                          heardName='More'
                          colId="1234"
                          tooltipField="小提示"
                          editable={true}  //该列可编辑

                      ></AgGridColumn>
                  </AgGridReact>
              </div>
                <div style={{heigth:'30px'}}>
                    <button onClick={this.onBtFirst}>To First</button>
                    <button onClick={this.onBtLast} id="btLast" disabled="true">
                        To Last
                    </button>
                    <button onClick={this.onBtPrevious}>To Previous</button>
                    <button onClick={this.onBtNext}>To Next</button>
                    <button onClick={this.onBtPageFive}>To Page 5</button>
                    <button onClick={this.onBtPageFifty}>To Page 10</button>
                </div>
                <div style={{ marginTop: "6px" }}>
                    <span class="label">Last Page Found:</span>
                    <span class="value" id="lbLastPageFound">
              -
            </span>
                    <span class="label">Page Size:</span>
                    <span class="value" id="lbPageSize">
              -
            </span>
                    <span class="label">Total Pages:</span>
                    <span class="value" id="lbTotalPages">
              -
            </span>
                    <span class="label">Current Page:</span>
                    <span class="value" id="lbCurrentPage">
              -
            </span>
                </div>

<br/>
<br/>
                <div  style={{height:300}} className="ag-theme-dark">
                    <AgGridReact
                        id="myGrid2"
                        rowData={this.state.rowData} //行定义数组
                        columnDefs={this.state.columnDefs} //列定义数组
                        suppressMovableColumns="false"  //true为列不能移动
                        suppressMenuHie="false" //true为列菜单按钮始终显示
                        enableColResize="true" //true为标题边缘处可拖动调整列
                        enableSorting="true" //true启动行排序
                        enableFilter="true"   //true启动行过滤
                        suppressRowClickSelection={false}  //true为点击行不发生行选择
                        rowClassRules={{'breach': 'data.price > 75000'}}
                        rowHeight="22" // 行高
                        pagination={true} //true为开启分页
                        paginationPageSize="12" //每页加载多少行
                        groupHeaderHeight={this.state.groupHeaderHeight}
                        headerHeight={this.state.headerHeight}
                        pivotGroupHeaderHeight={this.state.pivotGroupHeaderHeight}
                        pivotHeaderHeight={this.state.pivotHeaderHeight}

                    >
                    </AgGridReact>
                </div>

                <div style={{heigth:'30px'}}>
                    <button onClick={this.showMedals.bind(this, true)}>Show All Medals</button>
                    <button onClick={this.showMedals.bind(this, false)}>Hide All Medals</button>
                    <button onClick={this.setPivotOn}>on</button>
                    <button onClick={this.setPivotOff}>off</button>
                </div>
            </div>
        );
    }

    onGridReady = (params) => {
        this.gridApi = params.api;
        this.gridColumnApi = params.columnApi;
        this.gridApi.sizeColumnsToFit(); //获取列的大小以适应网格水平。
    };

    onBtFirst = () => {
        this.gridApi.paginationGoToFirstPage();
    };
    onBtLast = () => {
        this.gridApi.paginationGoToLastPage();
    };
    onBtNext = () => {
        this.gridApi.paginationGoToNextPage();
    };
    onBtPrevious = () => {
        this.gridApi.paginationGoToPreviousPage();
    };
    onBtPageFive = () => {
        this.gridApi.paginationGoToPage(4);
    };
    onBtPageFifty = () => {
        this.gridApi.paginationGoToPage(9);
    };

    onPaginationChanged = () => {
        if (this.gridApi) {
            setText("#lbLastPageFound", this.gridApi.paginationIsLastPageFound());
            setText("#lbPageSize", this.gridApi.paginationGetPageSize());
            setText("#lbCurrentPage", this.gridApi.paginationGetCurrentPage() + 1);
            setText("#lbTotalPages", this.gridApi.paginationGetTotalPages());
            setLastButtonDisabled(!this.gridApi.paginationIsLastPageFound());
        }
     };

    onbodyScroll = () =>{
       console.info('滚动');
    };

    onCellClicked = () => {
      console.info('点击单元格');
      var data = [{make: "123", model: "123", price: 3214532}];
      //this.gridApi.setRowData(data);
     // var col = this.gridApi.columnApi.getColumn('colId');  //失败了
       // console.log(col);
    };

    onRowDataChange = () => {

    };

    showMedals(show) {
        this.gridColumnApi.setColumnsVisible(["price", "model","make"], show); //失败
    };



}

export default AgGrid;

