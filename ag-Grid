查找源代码--光标移到单词，再command加左键
!!一般用来将后面的表达式强制转换为布尔类型的数据（boolean），也就是只能是true或者false;

ag-grid是Grid控件，系统模块中的表单是通过这个控件实现的。必须非常了解这个控件
https://www.ag-grid.com/
如何显示记录---rowdata,columndefs
如何更新数据之后刷新界面----更新RowNodes数据/批量更新/样式
如何分页显示数据--page，无限滚动
如何操作当个单元格---event
如何在地编辑数据----edit

1.事件函数通过在“on”前加上事件名称（驼峰命名法）
2.列中定义filter在可筛选想要的,pinned列固定
3.该方法仅api.setRowData()适用 于内存行模型
所有的valueGetter都必须是纯函数（给定相同的数据状态，它应该始终返回相同的结果）
valueFormatter是文本格式/值转换。 cellRenderer当你想要包含HTML标记和潜在的功能到单元格的时候
rowGroup is only valid in ag-Grid-Enterprise!!!
toolPanel is only available in ag-Grid Enterprise
aggFunc is only valid in ag-Grid-Enterprise
rowGroupIndex is only valid in ag-Grid-Enterprise




?
列组定义时不能合并行
defaultColGroupDef没改掉
一个按钮不能操作多个表？
折叠组https://www.ag-grid.com/javascript-grid-data-update/#gsc.tab=0 
刷新
不能实现按组打开
动画函数
组件
过滤
cellRender


解决了行分组的的问题，以及依赖企业版本的属性，但出现许可证有报错
对过滤使用和刷新的样式修改有了了解
无限滚动的页数在弄
对布局有了初步的构思






/**
 * Created by Mac on 2018/1/4.
 */

import React, {Component} from 'react';
import {AgGridColumn, AgGridReact } from 'ag-grid-react';
import 'ag-grid/dist/styles/ag-grid.css';
import 'ag-grid/dist/styles/ag-theme-dark.css';
import 'ag-grid/dist/styles/ag-theme-fresh.css';
import './AgGrid.css';

function setText(selector, text) {
    document.querySelector(selector).innerHTML = text;
}
function setLastButtonDisabled(disabled) {
    document.querySelector("#btLast").disabled = disabled;
}

function rowDataFactory(data) {
    const rowData = [];
    for(let i = 0; i < data.length; i++){
        rowData.push(
            {
                make:data[i],
                model:Math.random(),
                price: new Date(),
                more: Math.random()
            }
        );
    }
    console.log(rowData);
    return rowData;
}

const newCount = 1;
function createNewRowData() {
    var newData = {
        make: "Toyota " + newCount,
        model: "Celica " + newCount,
        price: 35000 + newCount * 17,
    };
    return newData;
}

function printResult(res) {
    console.log("---------------------------");
    if (res.add) {
        res.add.forEach(function(rowNode) {
            console.log("Added Row Node", rowNode);
        });
    }
    if (res.remove) {
        res.remove.forEach(function(rowNode) {
            console.log("Removed Row Node", rowNode);
        });
    }
    if (res.update) {
        res.update.forEach(function(rowNode) {
            console.log("Updated Row Node", rowNode);
        });
    }
}

function createNewRowDatacat(category) {
    var newData = {
        model: category,
        make: (new Date()).getTime(),
        price: Math.floor(Math.random() * 800000) + 20000,
        year: Math.floor(Math.random() *100) % 2 === 0 ? '2015' : '2016'
    };
    return newData;
}

function headerClassFunc(params) {  //失败
    var foundA = false;
    var foundB = false;
    var item = params.column ? params.column : params.columnGroup;
    while (item) {
        if (item.getDefinition().groupId === "GroupA") {
            foundA = true;
        } else if (item.getDefinition().groupId === "GroupB") {
            foundB= true;
        }
        item = item.getParent();
    }
    if (foundB) {
        return "column-group-a";
    } else if (foundA) {
        return "column-group-b";
    } else {
        return null;
    }
}

function poundFormatter(params) {
    return (
        "\xA3" +
        Math.floor(params.value)
            .toString()
            .replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,")
    );
}

var categories = ["make", "model", "price"];
function getInitialRowData() {
    var rowData = [];
    for (var i = 0; i < 12; i++) {
        var category = categories[i % categories.length];
        rowData.push(createNewRowDatacat(category));
    }
    return rowData;
}


var data = [];
var topRowData = [];
var bottomRowData = [];
function createData(count) {
    var result = [];
    for (var i = 1; i <= count; i++) {
        result.push({
            make: (i * 863) % 100,
            model: (i * 811) % 100,
            price: (i * 743) * 100,
            year: i % 2 === 0? '2017' : '2018'
        });
    }
    return result;
}

function scramble() {
    data.forEach(scrambleItem);
    topRowData.forEach(scrambleItem);
    bottomRowData.forEach(scrambleItem);
}

function scrambleItem(item) {
    ["make", "model", "price"].forEach(function(colId) {
        if (Math.random() > 0.5) {
            return;
        }
        item[colId] = Math.floor(Math.random() * 100);
    });
}

function isForceRefreshSelected() {
    return document.querySelector("#forceRefresh").checked;
}
function callRefreshAfterMillis(params, millis, gridApi) {
    setTimeout(function() {
        gridApi.refreshCells(params);
    }, millis);
}





class AgGrid extends Component {
    constructor() {
        super();
        this.state = {
            rowData: [
                {make: "Toyota", model: "Celica", price: 35000, id:'a'},
                {make: "Ford", model: "Mondeo", price: 32000},
                {make: "Porsche", model: "Boxter", price: 72000},
                {make: "Toyota", model: "Celica", price: 35000},
                {make: "Ford", model: "Mondeo", price: 32000},
                {make: "Toyota", model: "Celica", price: 35000},
                {make: "Ford", model: "Mondeo", price: 32000},
                {make: "Porsche", model: "Boxter", price: 72000},
                {make: "Toyota", model: "Celica", price: 35000},
                {make: "Ford", model: "Mondeo", price: 32000},
                {make: "Toyota", model: "Celica", price: 35000},
                {make: "Ford", model: "Mondeo", price: 32000},
                {make: "Porsche", model: "Boxter", price: 72000},
                {make: "Toyota", model: "Celica", price: 35000},
                {make: "Ford", model: "Mondeo", price: 32000},
                {make: "Ford", model: "Mondeo", price: 32000},
                {make: "Porsche", model: "Boxter", price: 72000},
                {make: "Toyota", model: "Celica", price: 35000},
                {make: "Ford", model: "Mondeo", price: 32000},
                {make: "Toyota", model: "Celica", price: 35000},
                {make: "Ford", model: "Mondeo", price: 32000},
                {make: "Porsche", model: "Boxter", price: 72000},
                {make: "Toyota", model: "Celica", price: 35000},
                {make: "Ford", model: "Mondeo", price: 32000},
                {make: "Toyota", model: "Celica", price: 35000},
                {make: "Ford", model: "Mondeo", price: 32000},
                {make: "Porsche", model: "Boxter", price: 72000},
                {make: "Toyota", model: "Celica", price: 35000},
                {make: "Ford", model: "Mondeo", price: 32000},
                {make: "Toyota", model: "Celica", price: 35000},
                {make: "Ford", model: "Mondeo", price: 32000},
                {make: "Porsche", model: "Boxter", price: 72000},
                {make: "Toyota", model: "Celica", price: 35000},
                {make: "Ford", model: "Mondeo", price: 32000},
                {make: "Toyota", model: "Celica", price: 35000},
                {make: "Ford", model: "Mondeo", price: 32000},
                {make: "Porsche", model: "Boxter", price: 72000},
                {make: "Toyota", model: "Celica", price: 35000},
                {make: "Ford", model: "Mondeo", price: 32000},
                {make: "Ford", model: "Mondeo", price: 32000},
                {make: "Porsche", model: "Boxter", price: 72000},
                {make: "Toyota", model: "Celica", price: 35000},
                {make: "Ford", model: "Mondeo", price: 32000},
                {make: "Toyota", model: "Celica", price: 35000},
                {make: "Ford", model: "Mondeo", price: 32000},
                {make: "Porsche", model: "Boxter", price: 72000},
                {make: "Toyota", model: "Celica", price: 35000},
                {make: "Ford", model: "Mondeo", price: 32000},
                {make: "Toyota", model: "Celica", price: 35000},
                {make: "Ford", model: "Mondeo", price: 32000},
                {make: "Porsche", model: "Boxter", price: 72000},
                {make: "Toyota", model: "Celica", price: 35000},
                {make: "Ford", model: "Mondeo", price: 32000},
                {make: "Porsche", model: "Boxter", price: 72000},
                {make: 1234, model: "Boxter", price: 93000},
                {make: 123, model: "Boxter", price: 80000}
            ],
            columnDefs: [
                {
                    headerName: "model",
                    field: "model",
                    rowGroupIndex: 1,
                    hide: true,
                    cellRenderer: "agGroupCellRenderer",
                },
                {
                    headerName: "Price",
                    field: "price",
                    aggFunc: "sum",
                    valueFormatter: poundFormatter
                },
                {
                    headerName: 'GROUP A',
                    groupId: "GroupA",
                    children: [{field: "make", filter: "agNumberColumnFilter", type: 'makeid'},
                        {field: 'model', width: 120,filter: "agTextColumnFilter"},
                        {field: 'price', width: 120,filter: "agTextColumnFilter"}
                    ] //可以展开组 suppressFilter: true
                }, //列组定义
                {
                    headerName: 'GROUP B',
                    groupId: "GroupB",
                    marryChildren: true,  //始终让小组专栏粘在一起
                    children: [
                        {field: "make", filter: "number", type: 'makeid'},
                        {field: "price", filter: "number", columnGroupShow: 'closed'},
                        {field: 'model', width: 120, columnGroupShow: 'open'}
                    ] //可以展开组
                },
                {headerName: "Make", field: "make"},
                {headerName: "Model", field: "model"},
                {headerName: "Price", field: "price",pinned: 'right',}
            ],
            refrow: [
                "Beckham", "Black", "Braxton", "Brennan", "Brock", "Bryson", "Cadwell",
                "Cage", "Carson", "Chandler", "Cohen", "Cole", "Corbin", "Dallas", "Dalton", "Dane",
                "Donovan", "Easton", "Fisher", "Fletcher", "Grady", "Greyson", "Griffin", "Gunner",
                "Hayden", "Hudson", "Hunter", "Jacoby", "Jagger", "Jaxon", "Jett", "Kade", "Kane",
                "Keating", "Keegan", "Kingston", "Kobe"
            ],
            defaultColDef: {editable: true, width: 200},
            columnTypes: {
                valueColumn: {
                    width: 120,
                    filter: "agNumberColumnFilter" //数字过滤
                }
            },
            defaultColGroupDef: {headerClass: headerClassFunc},
            defaultColDef: {
                headerClass: headerClassFunc,
                width: 90,
            },
            groupHeaderHeight: 35,
            headerHeight: 50 ,
            pivotGroupHeaderHeight: 40,
            pivotHeaderHeight:50,
            getRowNodeId: function(data){
                return data.id;
            },
            groupDefaultExpanded: 1,
            autoGroupColumnDef: {
                headerName: "Group",
                field: "group",
                rowGroupIndex: 1,
                cellRenderer: "agGroupCellRenderer",
                cellRendererParams: { checkbox: true }
            },
            getRowClass: function(params){
                var rowNode = params.node;
                if (rowNode.group) {
                    switch (rowNode.key) {
                        case "In make":
                            return "category-one";
                        case "In model":
                            return "category-two";
                        case "In price":
                            return "category-three";
                        default:
                            return null;
                    }
                } else {
                    return null;
                }
            },
            pinnedTopRowData: [],
            pinnedBottomRowData: []
        };

    }

    render() {
        return (
            <div>
              <h2>AgGrid表格</h2>
              <div  style={{height:300}} className="ag-theme-fresh">
                  <AgGridReact 
                      id="myGrid1"
                      rowData={rowDataFactory(this.state.refrow)} //行定义数组
                      //columnDefs={this.state.columnDefs} //列定义数组
                      suppressMovableColumns="false"  //true为列不能移动
                      suppressMenuHide="false" //true为列菜单按钮始终显示
                      enableColResize="true" //true为标题边缘处可拖动调整列
                      enableSorting="true" //true启动行排序
                      enableFilter="true"   //true启动行过滤
                      enableRangeSelection={true}//鼠标拖拽可有范围选取
                      suppressRowClickSelection={false}  //true为点击行不发生行选择
                      //singleClickEdit={true} //true为点击可编辑和defaultColDef一起用
                      //defaultColDef={this.state.defaultColDef}

                      // suppressClickEdit={true}
                      headerHeight="26" //头部的高度，不设置默认为25px
                      rowSelection="multiple" //行选择类型
                      suppressColumnVirtualisation={true} //true为网格不虚拟化，全部都呈现
                      rowHeight="22" // 行高
                      pagination={true} //true为开启分页
                      paginationPageSize="15" //每页加载多少行
                      onPaginationChanged={this.onPaginationChanged}
                      maxBlocksInCache="5" //缓存多少页
                      //suppressScrollOnNewData={true} //网格在页面更改时不滚动到顶部
                      suppressPaginationPanel={true} //网格将不会显示用于分页的标准导航控件
                      //icon自定义 icons={{'menu':'<img src="https://cdn.rawgit.com/ag-grid/ag-grid-docs/56853d5aa6513433f77ac3f808a4681fdd21ea1d/src/javascript-grid-icons/plus.png" style="width: 12px;padding-right: 2px">'}}
                      rowClassRules={{'breach': 'data.more > 0.9'}} //包含某些CSS类
                      overlayNoRowsTemplate={'<span>请稍后。。。</span>'}  //提供'无行'覆盖的模板
                      onGridReady={this.onGridReady}  //ag-Grid已经初始化了,网格的API将列固定到大小
                      valueCacheNeverExpires="true"  //数据更新后不会过期。

                      onBodyScroll={this.onbodyScroll}   //滚动事件
                      onCellClicked={this.onCellClicked} //单击事件
                      onRowDataChanged={this.onRowDataChange}
                      //suppressAggFuncInHeader={true}  //列标题将不包含aggFunc
                      animateRows={true} //点击排序有动画效果
                  >
                      <AgGridColumn field="make"></AgGridColumn>
                      <AgGridColumn field="model"></AgGridColumn>
                      <AgGridColumn
                          field="price"
                          cellClass="price"
                      ></AgGridColumn>
                      <AgGridColumn
                          field="more"
                          heardName='More'
                          colId="1234"
                          tooltipField="小提示"
                          editable={true}  //该列可编辑

                      ></AgGridColumn>
                  </AgGridReact>
              </div>
                <div style={{heigth:'30px'}}>
                    <button onClick={this.onBtFirst}>To First</button>
                    <button onClick={this.onBtLast} id="btLast" disabled="true">
                        To Last
                    </button>
                    <button onClick={this.onBtPrevious}>To Previous</button>
                    <button onClick={this.onBtNext}>To Next</button>
                    <button onClick={this.onBtPageFive}>To Page 5</button>
                    <button onClick={this.onBtPageFifty}>To Page 10</button>
                </div>
                <div style={{ marginTop: "6px" }}>
                    <span className="label">Last Page Found:</span>
                    <span className="value" id="lbLastPageFound">
              -
            </span>
                    <span className="label">Page Size:</span>
                    <span className="value" id="lbPageSize">
              -
            </span>
                    <span className="label">Total Pages:</span>
                    <span className="value" id="lbTotalPages">
              -
            </span>
                    <span className="label">Current Page:</span>
                    <span className="value" id="lbCurrentPage">
              -
            </span>
                </div>

<br/>
<br/>
                <div  style={{height:400}} className="ag-theme-dark">
                    <AgGridReact
                        id="myGrid2"
                        //rowData={this.state.rowData} //行定义数组
                        rowData={getInitialRowData()}
                        columnDefs={this.state.columnDefs} //列定义数组
                        suppressMovableColumns="false"  //true为列不能移动
                        suppressMenuHie="false" //true为列菜单按钮始终显示
                        enableColResize="true" //true为标题边缘处可拖动调整列
                        enableSorting="true" //true启动行排序
                        enableFilter="true"   //true启动行过滤
                        rowClassRules={{'breach': 'data.price < 2000'}}
                        rowHeight="22" // 行高
                        pagination={true} //true为开启分页
                        paginationPageSize="15" //每页加载多少行
                        groupHeaderHeight={this.state.groupHeaderHeight}
                        headerHeight={this.state.headerHeight}
                        pivotGroupHeaderHeight={this.state.pivotGroupHeaderHeight}
                        pivotHeaderHeight={this.state.pivotHeaderHeight}
                        getRowNodeId={this.state.getRowNodeId}
                        animateRows={true}
                        onGridReady={this.onGridReady}
                        rowSelection="multiple"
                        getRowClass={this.state.getRowClass}
                        groupDefaultExpanded={this.state.groupDefaultExpanded}
                        autoGroupColumnDef={this.state.autoGroupColumnDef}
                        groupSelectsChildren={true}
                        rememberGroupStateWhenNewData={true}
                        pinnedTopRowData={this.state.pinnedTopRowData}
                        pinnedBottomRowData={this.state.pinnedBottomRowData}
                        enableCellChangeFlash={true} //刷新的单元格会闪烁

                    >
                    </AgGridReact>
                </div>

                <div style={{heigth:'30px'}}>
                    <button onClick={this.showMedals.bind(this, true)}>Show All Medals</button>
                    <button onClick={this.showMedals.bind(this, false)}>Hide All Medals</button>
                    <button onClick={this.updateSort}>Sort</button>
                    <button onClick={this.updateFilter}>Filter</button>
                    <button onClick={this.setPrice}>setPrice</button>
                    <br/>
                    <button onClick={this.onAddRow}>Add Row</button>
                    <button onClick={this.onInsertRowAt2}>Insert Row @ 2</button>
                    <button onClick={this.onRemoveSelected}>Remove Selected</button>
                    <button onClick={this.getRowData}>Get Row Data</button>
                    <button onClick={this.clearData}>Clear Data</button>
                    <button onClick={this.addItems}>Add Items</button>
                    <br/>
                    <button  onClick={this.onAddRowcat.bind(this, "make")}>
                        Add For make
                    </button>
                    <button onClick={this.onAddRowcat.bind(this, "make")}>
                        Add In make
                    </button>
                    <button  onClick={this.onMoveToGroup.bind(this, "price")}>
                        Move to For price
                    </button>
                    <button  onClick={this.onMoveToGroup.bind(this, "make")}>
                        Move to In make
                    </button>
                    <button  onClick={this.onMoveToGroup.bind(this, "model")}>
                        Move to model
                    </button>
                    <br/>
                    <button onClick={this.scrambleAndRefreshAll}>Scramble &amp; Refresh All</button>
                    <button onClick={this.scrambleAndRefreshTopToBottom}>Scramble &amp; Refresh Top to Bottom</button>
                    <button onClick={this.scrambleAndRefreshLeftToRight}>Scramble &amp; Refresh Left to Right</button>
                    <label>
                        <input type="checkbox" id="forceRefresh" />
                        Force Refresh
                    </label>

                </div>
            </div>
        );
    }

    onGridReady = (params) => {
        this.gridApi = params.api;
        this.gridColumnApi = params.columnApi;
        this.gridApi.sizeColumnsToFit(); //获取列的大小以适应网格水平。

        data = createData(14);
        topRowData = createData(2);
        bottomRowData = createData(2);

    };

    onBtFirst = () => {
        this.gridApi.paginationGoToFirstPage();
    };
    onBtLast = () => {
        this.gridApi.paginationGoToLastPage();
    };
    onBtNext = () => {
        this.gridApi.paginationGoToNextPage();
    };
    onBtPrevious = () => {
        this.gridApi.paginationGoToPreviousPage();
    };
    onBtPageFive = () => {
        this.gridApi.paginationGoToPage(4);
    };
    onBtPageFifty = () => {
        this.gridApi.paginationGoToPage(9);
    };

    onPaginationChanged = () => {
        if (this.gridApi) {
            setText("#lbLastPageFound", this.gridApi.paginationIsLastPageFound());
            setText("#lbPageSize", this.gridApi.paginationGetPageSize());
            setText("#lbCurrentPage", this.gridApi.paginationGetCurrentPage() + 1);
            setText("#lbTotalPages", this.gridApi.paginationGetTotalPages());
            setLastButtonDisabled(!this.gridApi.paginationIsLastPageFound());
        }
     };

    onbodyScroll = () =>{
       console.info('滚动');
    };

    onCellClicked = () => {
      console.info('点击单元格');
      var data = [{make: "123", model: "123", price: 3214532}];
      //this.gridApi.setRowData(data);
     // var col = this.gridApi.columnApi.getColumn('colId');  //失败了
       // console.log(col);
    };

    onRowDataChange = () => {

    };

    showMedals = (show) => {
        this.gridColumnApi.setColumnsVisible(["price", "model","make"], show); //可控制这几列显示或隐藏
    };

    updateSort = () => {
        this.gridApi.refreshInMemoryRowModel("sort");
    };

    updateFilter = () => {
        this.gridApi.refreshInMemoryRowModel("filter");
    };

    setPrice = () => {
        const rowNode = this.gridApi.getRowNode("a");
        const newPrice = Math.floor(Math.random() * 100000);
        rowNode.setDataValue("price", newPrice);
    };  //失败

    clearData = () => { //ok
        this.gridApi.setRowData([]);
    };

    onAddRow = () => { //ok
        var newItem = createNewRowData();
        var res = this.gridApi.updateRowData({ add: [newItem] });
        printResult(res);
    };


    onInsertRowAt2 = () => { //ok
        var newItem = createNewRowData();
        var res = this.gridApi.updateRowData({
            add: [newItem],
            addIndex: 2
        });
        printResult(res);
    };

    onRemoveSelected = () => { //ok
        var selectedData = this.gridApi.getSelectedRows();
        var res = this.gridApi.updateRowData({ remove: selectedData });
        printResult(res);
    };

    getRowData = () => {
        var rowData = [];
        this.gridApi.forEachNode(function(node) {
            rowData.push(node.data);
        });
        console.log("Row Data:");
        console.log(rowData);
    };

    addItems = () => {
        var newItems = [createNewRowData(), createNewRowData(), createNewRowData()];
        var res = this.gridApi.updateRowData({ add: newItems });
        printResult(res);
    }

    getRowClass = (params) => {
        var rowNode = params.node;
        if (rowNode.group) {
            switch (rowNode.key) {
                case "make":
                    return "category-one";
                case "model":
                    return "category-two";
                case "price":
                    return "category-three";
                default:
                    return null;
            }
        } else {
            return null;
        }
    };

    onMoveToGroup = (category) => {
        const selectedRowData = this.gridApi.getSelectedRows();
        selectedRowData.forEach(function(dataItem) {
            dataItem.category = category;
        });
        this.gridApi.updateRowData({ update: selectedRowData });
    };

    onAddRowcat = (category) => {
        var rowDataItem = createNewRowDatacat(category);
        this.gridApi.updateRowData({ add: [rowDataItem] });
    };



    scrambleAndRefreshLeftToRight = () => {
        scramble();
        var api = this.gridApi;
        ["a", "b", "c", "d", "e", "f"].forEach(function(col, index) {
            var millis = index * 100;
            var params = {
                force: isForceRefreshSelected(),
                columns: [col]
            };
            callRefreshAfterMillis(params, millis, api);
        });
    };

    scrambleAndRefreshAll = () => {
        scramble();
        var params = { force: isForceRefreshSelected() };
        this.gridApi.refreshCells(params);
    };


    scrambleAndRefreshTopToBottom = () => {
        scramble();
        var frame = 0;
        var i;
        var rowNode;
        var api = this.gridApi;
        for (i = 0; i < api.getPinnedTopRowCount(); i++) {
            rowNode = api.getPinnedTopRow(i);
            refreshRow(rowNode, api);
        }
        for (i = 0; i < this.gridApi.getDisplayedRowCount(); i++) {
            rowNode = this.gridApi.getDisplayedRowAtIndex(i);
            refreshRow(rowNode, api);
        }
        for (i = 0; i < this.gridApi.getPinnedBottomRowCount(); i++) {
            rowNode = this.gridApi.getPinnedBottomRow(i);
            refreshRow(rowNode, api);
        }
        function refreshRow(rowNode, api) {
            var millis = frame++ * 100;
            var rowNodes = [rowNode];
            var params = {
                force: isForceRefreshSelected(),
                rowNodes: rowNodes
            };
            callRefreshAfterMillis(params, millis, api);
        };
    }


}

export default AgGrid;

