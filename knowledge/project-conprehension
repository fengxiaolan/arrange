issue:
  
  
  


resolve: 
 1.letterSpacing需要在style属性里进行定义才有效果，但也要分情况
 2.checkbox的波纹效果是两个控件构成的，需要找源码找到控制它的属性
 3.两个事件有先后关系，可以尝试使用loadsh里的debounce来达到延时效果
 4.进度条是跟着驱动事件一直就能得到请求
 5.textField监测错误可找sourceCODE里form中的onchang监听事件，控制一个变量来监测那个文本框出错 
 
habit:
1.oo编程（代码精简）
2.从逻辑上读源代码
3.时时运用bug工具
4.发现错误要勇于提出

 
remmber:
 1.优秀是一种习惯
 2.文档再好也没有作者的源码更准确
 3.不是考虑设计的好与否，而是把需要的做出来
 4.解决问题重在思路与方向
 5.没有唯一标准答案，不要有等，靠，要的思想
 6.不要有捡了西瓜丢了芝麻
 7.脚踏实地，切勿眼高手低



git使用：
1.pull操作：(1) checkout自己服务器的-->添加remote的主文件--->pull主文件--->merge（若没有立即merge且无法继续pull,记得commit）
    (2)若出现pull no item但跟服务器文件不同的话，可以尝试先在自己服务器pull再commit再主文件pull
    
2.revert

3.fetch和rebase

4.webstorm中git出现remote no reposity
  1）.配置：
    git config --global user.name "你的名字"
    git config --global user.email "你的邮箱"
    git config -l
    ssh-keygen -t rsa -C "你的邮箱"
  2）.手动在.ssh里生成config文件
    Host githost
    Hostname 120.76.xx.xx
    User git
    IdentityFile “c:\users\DELL\.ssh\id_rsa”
    若是在mac中，最后一句应该为：IdentityFile "/Users/Zhang/.ssh/id_rsa"
  3）.该方法没成功
    删除.ssh下面的known_hosts文件  ?
    删除github上的密钥，并重新生成和添加密钥
    设置.ssh
  4）.先检查ssh是否配置-->在版本控制器中SSH可执行文件选择native





1.window.js
extends window就是利用它重写的方法

2.
isFullWidthCell={this.state.isFullWidthCell}
ullWidthCellRenderer={this.state.fullWidthCellRenderer}不能与cellRenderer:  'agGroupCellRenderer',一起公用（在全宽下面的话）？
行组还是有问题，嵌套，且语法不对  getNodeChildDetails


3.svg sprites
viewBox="x, y, width, height"  // x:左上角横坐标，y:左上角纵坐标，width:宽度，height:高度
更形象的解释就是：SVG就像是我们的显示器屏幕，viewBox就是截屏工具选中的那个框框，最终的呈现就是把框框中的截屏内容再次在显示器中全屏显示！

图标图形整合在一起，实际呈现的时候准确显示特定图标？

自动导入
// requires and returns all modules that match
const requireAll = requireContext => requireContext.keys().map(requireContext);

// import all svg
const req = require.context('./assets/svg', true, /\.svg$/);
requireAll(req);

可以产生symbol
只有我们自己引入的 svg 文件需要经过 svg-sprite-loader，那么就将这些 svg 统一放到一个目录下，我这里放到了 src/assets/svg/ ，
再修改 loader 配置。
我们要接触的是一个叫 svg-sprite-loader 的插件，用来根据导入的 svg 文件自动生成 symbol 标签并插入 html，

在SVG中<use>可以在任何地方复用svg文件中定定义的的形，包括<g>和 <symbol>已经<defs>
在使用 use 时，它必须要有一个id，这样 use 通过xlink:href的值找到该形状的引用。注意，一定要在前面加一个#，这样才能引用ID成功。

 svg中viewBox是控制起点，style是控制缩放，use中可以控制本身引用的大小
















import React from 'react'
import PropTypes from 'prop-types'
import {connect} from 'react-redux'

import Formsy from 'formsy-react';
import FlatButton from 'material-ui/FlatButton'
import FormsyCheckbox from 'formsy-material-ui/lib/FormsyCheckbox';
import FormsyText from 'formsy-material-ui/lib/FormsyText';
import {blue500} from 'material-ui/styles/colors';

import md5 from './md5'
import FormComponent from './controls/formComponent'
import ErrorNotice from './controls/errorNotice'
import LoadingButton from './controls/loadingButton'
import PasswordInput from './controls/passwordInput'
import {
    USER_LOGIN,
    USER_LASTLOGIN,
    requestLoginAction,
    requestLastLoginAction,

} from '../store/loginActions'

const defaultLastLogin = {};

class LoginPanel extends FormComponent {
    static propTypes = {
        ...FormComponent.propTypes,
        onPasswordReset   : PropTypes.func.isRequired,
        lastLogin         : PropTypes.object.isRequired,
        requestLoginAction: PropTypes.func.isRequired
    };

    componentWillMount()
    {
        this.props.requestLastLoginAction();
    }
    
    submitForm = (form) =>
    {
        this.setStatus(false, true, false, '',)
            .then(() =>
                  {
                      if (form.password !== this.props.lastLogin.password)
                          form.password = md5(form.password, true);
                
                      this.props.requestLoginAction(form.isDemo,
                                                    form.userID,
                                                    form.password,
                                                    form.keepLoginInfo);
                  });
    };
    
    requestPwdReset = () =>
    {
        this.props.onPasswordReset();
    };
    
    onCheck = (event) =>
    {
        this.setState({[event.target.name]: !this.state[event.target.name]})
    };
    
    componentWillReceiveProps(nextProps)
    {
        super.componentWillReceiveProps(nextProps);
        
        if (this.state.userID === undefined && nextProps.lastLogin.userID)
        {
            this.setState({...nextProps.lastLogin})
        }
    }
    
    render()
    {
        let linkColor   = blue500,
            {translator}= this.props,
            translates  = translator.translates,
            resetBtn    = {
                onTouchTap: this.requestPwdReset,
                className : "forgetPwd",
                label     : translates.FORGET_PASSWORD,
                disabled  : this.state.isResetting,
                labelStyle: {textTransform: 'none', fontSize: '80%', paddingRight: 0, color: linkColor}
            },
            submitBtn   = {
                className: "center marginTop fullWidth",
                type     : "submit",
                label    : translates.SUBMIT,
                disabled : !this.state.canSubmit
            };
        
        return <Formsy.Form
            ref="form"
            method="post"
            autoComplete="off"
            disabled={this.state.isSubmitting}
            onValid={() => this.setStatus(true)}
            onInvalid={() => this.setStatus(false)}
            onValidSubmit={this.submitForm}
        >
            {/*fake fields are a workaround for chrome autofill getting the wrong fields*/}
            <input style={{display: 'none'}} type="text" name="fakeusernameremembered" defaultValue="fake"/>
            <input style={{display: 'none'}} type="password" name="fakepasswordremembered" defaultValue="fake"/>
            
            <FormsyText
                fullWidth={true}
                value={this.state.userID}
                name="userID"
                required
                hintText={translates.ACCOUNT_HINT}
                floatingLabelText={translates.ACCOUNT}
                disabled={this.state.isSubmitting}
            />
            
            <PasswordInput password={this.state.password} translator={translator} disabled={this.state.isSubmitting}/>
            
            <FlatButton {...resetBtn}/>
            
            <FormsyCheckbox
                disabled={this.state.isSubmitting}
                onChange={this.onCheck}
                name="keepLoginInfo"
                value={this.state.keepLoginInfo}
                label={translates.KEEPPWD_HINT}
                className="marginTop"
            />
            
            {/*<FormsyCheckbox*/}
            {/*disabled={this.state.isSubmitting}*/}
            {/*onChange={this.onCheck}*/}
            {/*name="isDemo"*/}
            {/*value={this.state.isDemo}*/}
            {/*label={translates.DEMO_HINT}*/}
            {/*/>*/}
            
            <ErrorNotice>{this.state.alertMsg ? translator.format('LOGIN_ERROR', this.state.alertMsg) : ''}</ErrorNotice>
            
            <LoadingButton isFlatButton={false}
                           indicator={{show: this.state.isSubmitting}}
                           button={submitBtn}/>
        </Formsy.Form>;
    }
}

export default connect(
    state => ({
        result   : state[USER_LOGIN],
        lastLogin: state[USER_LASTLOGIN].getResult() || defaultLastLogin
    }),
    {
        requestLoginAction,
        requestLastLoginAction
    })(LoginPanel);
