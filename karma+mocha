参考文献：
http://annn.me/frontend-ci-cd/
http://karma-runner.github.io/0.12/plus/jenkins.html
http://powertech.iteye.com/blog/2051387
http://www.shenyanchao.cn/blog/2013/04/01/run-karma-in-jenkins-ci/
http://www.shenyanchao.cn/blog/2013/03/27/use-karma-to-run-mocha-test/
http://www.51testing.com/html/70/n-3720170.html
https://github.com/nupthale/jasmine_karma_travis


https://segmentfault.com/a/1190000004558796
http://www.cnblogs.com/junhua/p/7809732.html
http://www.mincoder.com/article/2502.shtml
http://www.shenyanchao.cn/blog/2013/03/27/use-karma-to-run-mocha-test/
https://github.com/tmallfe/tmallfe.github.io/issues/37

https://mochajs.org/#arrow-functions

markdown : https://www.jianshu.com/p/82e730892d42
js框架  http://www.cnblogs.com/mbailing/articles/Js.html

1.单测框架（即 mocha）Mocha的作用是运行测试脚本
 测试脚本里面应该包括一个或多个describe块，每个describe块应该包括一个或多个it块。
describe块称为“测试套件”（test suite），表示一组相关的测试。它是一个函数，第一个参数是测试套件的名称（“加法函数的测试”），第二个参数是一个实际执行的函数。
it块称为“测试用例”（test case），表示一个单独的测试，是测试的最小单位。它也是一个函数，第一个参数是测试用例的名称（“1 加 1 应该等于 2”），第二个参数是一个实际执行的函数。
断言库有很多种，mocha 并不限制使用哪一种。上面代码引入的断言库是 chai，并且指定使用它的assert断言风格。因为这更接近其它语言的风格。
所谓"断言"，就是判断源码的实际执行结果与预期结果是否一致，如果不一致就抛出一个错误
expect断言风格 var expect = require('chai').expect;
             expect(4 + 5).to.be.equal(9); 其中equal是expect的方法
             如果expect断言不成立，就会抛出一个错误。事实上，只要不抛出错误，测试用例就算通过。

可以集成到webstorm里单测可用在run-->edit config-->mocha-(写上文件目录*.test.js 或者*.spec.js)

2.Karma 不是一个测试框架，也不是一个断言库，仅仅启动一个 http server，并通过你熟知的测试框架生成运行测试的HTML。
karma init my.conf.js命令生成配置文件，安装完成后会生成my.conf.js，改js为karma的配置项
    
    参考：http://blog.csdn.net/maomaolaoshi/article/details/78542837
    
    //将用于解析files和exclude中定义的所有相对路径的根路径位置。如果basePath的配置是一个相对路径，那么它将被解析到__dirname的配置文件中。
        basePath: "",

        //默认为[]。你要使用的测试框架列表。通常情况下，你会设置该值为['jasmine'], ['mocha'] 或 ['qunit']…
        //请注意: karma中的所有框架都需要安装额外的插件/框架库（通过NPM）。
        frameworks: ["jasmine"],

        //默认为[]。在浏览器中加载的文件/模式列表。查看更多关于https://karma-runner.github.io/latest/config/files.html的信息
        
        files: [
            "karmaTest/*.js"，
            {
                pattern: 'src/**/*.js',
                // false 表示初始化的时候不会使用 script 标签直接将相关 js 引入到浏览器，需要自己写代码加载
                included: false
            },
        ],

        //默认为[]。从加载文件中排除的文件/模式的列表
        exclude: [
        ],

        //在浏览器使用之前处理匹配的文件
        //默认为{'**/*.coffee': 'coffee'}。要是用的预处理器的映射。预处理器可以通过插件加载。
       //注意：几乎所有的karma的预处理器（除了CoffeeScript和一些其他默认的预处理器）都需要（通过NPM）额外的库去安装。
        preprocessors: {
            "karmaTest/test.js" : "coverage",
            '**/*Spec.js' : ['webpack'] //告诉karma需要Webpack打包的文件所在位置，
        },

        //默认为 ['progress']。 可能的值：dots, progress。
        //使用的报告者（reporter）列表。额外的报告者，例如growl, junit, teamcity 或者 coverage 可以通过插件被加载。
        //注意：几乎所有的karma报告者都需要（通过NPM）额外的库去安装。
        reporters: ["progress", "coverage"],
        
        // Webpack配置,在这是导入
        webpack: webpackConfig,
        
        // Webpack中间件
        webpackMiddleware: {
          noInfo: true
        },
        
        // 测试覆盖率报告，使用reporters为"coverage"时报告输出的类型和那目录
        // https://github.com/karma-runner/karma-coverage/blob/master/docs/configuration.md
        //可能的值：
        //html （默认）
        //lcov （lcov和html）
        // lcovonly
        //text
       // text-summary
        //cobertura （Jenkins支持的xml格式）
        coverageReporter: {
          dir: './coverage',
          reporters: [   //报告配置,在配置文件中包含下面的信息来激活覆盖率报告器.
            { type: 'lcov', subdir: '.' },
            { type: 'text-summary' }
          ]
        }

        //默认值为9876。设置将被web服务器监听的端口
        port: 9876,

        //默认为true。启用或禁用输出（报告和日志）的颜色
        colors: true,

        /**
         * 日志等级
         * 可能的值：
         * config.LOG_DISABLE //不输出信息
         * config.LOG_ERROR    //只输出错误信息
         * config.LOG_WARN //只输出警告信息
         * config.LOG_INFO //输出全部信息
         * config.LOG_DEBUG //输出调试信息
         */
        logLevel: config.LOG_INFO,

        //默认为true。启用或禁用监视文件，当这些文件被改变时，执行测试。
        autoWatch: true,
        
        //配置设置将告诉karma在发生更改之后，在再次发生更改之前，应该等待多久（毫秒）。
        autoWatchBatchDelay: 250,


        //该值是要启动和捕获的浏览器列表。当Karma启动时，它也会启动放置在这个设置中的每个浏览器。一旦Karma关闭，它也会关闭这些浏览器。
        //您可以通过打开浏览器并访问Karma Web服务器正在侦听的URL来手动捕获任何浏览器（默认情况下为http://localhost:9876/）。
        //可能的值：
       /* Chrome （发射器需要karma-chrome-launcher插件）
        *ChromeCanary （发射器需要karma-chrome-launcher插件）
        *PhantomJS （发射器需要karma-phantomjs-launcher插件）
        *Firefox （发射器需要karma-firefox-launcher插件）
        *Opera （发射器需要karma-opera-launcher插件）
        *IE （发射器需要karma-ie-launcher插件）
        *Safari （发射器需要karma-safari-launcher插件）
        */
        browsers: ["Chrome"],
        
        //默认为2000。规定karma等待浏览重连的时间（毫秒）。
        browserDisconnectTimeout: 2000,
        
        //默认为'0.0.0.0'或LISTEN_ADDR。服务器的地址将会被监听。更改为localhost仅仅会监听环路，或者更改为::，监听所有的IPv6接口。
        listenAddress: '0.0.0.0',
        
        //默认为localhost。捕获浏览器时使用的主机名。
        hostname: localhost,
        
        //默认为"60000"。捕获浏览器的超时时长（ms）。该值代表着浏览器启动并连接到karma的最大启动时长。
        //如果浏览器不能在规定时长内被捕获到，karma将会结束该任务，并尝试重新启动它，如此三次之后，karma将会放弃捕获。
        captureTimeout: 60000,
        
        //路径代理对的映射。默认{}
        //代理可以直接由目标url或路径指定，也可以通过对象配置更多选项{target: 必填, changeOrigin： 默认false,代理是否应使用来自目标的主机覆盖主机头}
        proxies: {
        '/img/': '/base/test/images/',
        '/proxyfied': {
          'target': 'http://myserver.localhost',
          'changeOrigin': true
        }
        },

        //默认为false。持续集成模式。如果该值为true，karma将会启动和捕获配置的浏览器，运行测试然后退出，退出使用的代码0或1取决于测试是成功还是失败。
        singleRun: true,

        //默认为"Infinity"。karma并行启动多少个浏览器
        concurrency: Infinity,
        
        //加载插件的列表。一个插件可以是一个字符串（这种情况下，它将会被karma引用）或者一个内联插件对象。默认情况下，karma会加载以karma-*开头命名的所有兄弟NPM 模块。
        //注意：几乎所有的karma插件都需要(通过NPM)一个额外的库来安装。
        plugins: [
         karma-mocha,...
        ]
        
优点： 1. cli（command-line interface，命令行界面） 运行，webstorm下配合完美 
      2. 良好支持 mocha、jasmine 等测试框架 
      3. 支持多浏览器的测试 
      4. 生态好，插件多 
      5. 集成监控解放双手，文件变化时自动启测，类似gulp的watch功能
    
3.命令行指定测试脚本时，可以使用通配符，同时指定多个文件。
shell通配符表示： $ mocha test/{,**/}*.{js,jsx}
node通配符表示： $ mocha 'test/**/*.@(js|jsx)'

Chai是一个单元测试的验证框架，它有3种不同形式的校验：expect、should和assert。expect和should的方式让写出来的测试代码更像自然语言，让业务人员也可以看懂，
而assert方式是传统单元测试断言的方式，如果以前习惯写Java的单元测试会对这种方式比较熟悉。

4。react单元测试常常与webpack工具结合

5.测试之chai.js断言库
chai.js 是一套TDD(测试驱动开发---注重输出结果)/BDD(行为驱动开发--注重测试逻辑)的断言库
语言链修饰符：to
be
been
is
that
which
and
has
have
with
at
of
same

具体api说明：
any/all
.a(type) / .an(type)： 用来断言变量类型
.include(value) / contains(value)：Object | String | Number，包含某个内容
not 跟在链式调用后面的否定断言
deep 用来深度比较2个对象,一般用在equal和property前面
.ok 断言目标是否为真(只判断值是否为真，类似==，隐式转换)
.true/.false 断言目标是否为布尔值true,false（这里与ok的区别是不进行类型转换，只能为true/false才能通过断言）
.null 断言目标为null
.undefined 断言目标为undefined
NaN 断言目标为NaN
exist 断言目标存在，既不为null，也不为undefined
empty 断言目标的长度为0。对于数组和字符串，它检查length属性，对于对象，它检查可枚举属性的数量
arguments 断言目标是一个参数对象arguments
equal(value) 断言目标严格等于(===)value。另外，如果设置了deep标记，则断言目标深度等于value
eql(value) 断言目标深度等于value，相当于deep.equal(value)的简写
above(value) 断言目标大于（超过）value,也可接在length后来断言一个最小的长度。相比直接提供长度的好处是提供了更详细的错误消息
least(value) 断言目标不小于，也可接在length后来断言一个最小的长度。相比直接提供长度的好处是提供了更详细的错误消息
below(value) 断言目标小于，也可接在length后来断言一个最小的长度。相比直接提供长度的好处是提供了更详细的错误消息
most(value) 断言目标不大于，也可接在length后来断言一个最小的长度。相比直接提供长度的好处是提供了更详细的错误消息
length 设置.have.length标记作为比较length属性值的前缀
lengthof() 断言目标的length属性为期望的值
match(RegExp) 断言目标匹配到一个正则表达式
string(string) 断言目标字符串包含另一个字符串

  “测试覆盖是一种学习手段”。学习什么呢？学习为什么有些代码没有被覆盖到，以及为什么有些代码变了测试却没有失败。理解“为什么”背后的原因，
  程序员就可以做相应的改善和提高，相比凭空想象单元测试的有效性和代码的好坏，这会更加有效。
  
6.
coverage输出结果
  statements：可执行语句执行情况
  branches：分支执行情况，比如if就会产生两个分支，我们只运行了其中的一个
  Functions：函数执行情况
  Lines：行执行情况

karma依赖的插件
  karma：框架本体
  karma-mocha：Mocha测试框架
  karma-coverage：覆盖率测试
  karma-spec-reporter：测试结果输出
  karma-phantomjs-launcher：PhantomJS环境
  phantomjs-prebuilt: PhantomJS最新版本
  karma-chrome-launcher：Chrome环境
  karma-firefox-launcher：Firefox环境

7.bug
（1）WARN [plugin]: Error during loading "karma-phantomjs-launcher" plugin:
  Path must be a string. Received null
  --------插件安装在--save-dev中，不要重复 （无界面的浏览器） 
  
 (2)karma浏览器显示与否 singleRun: false  才能显示，不然浏览器会自动关闭
 
（3）autoWatch：true 与 singleRun: true 冲突  
   因为我们使用的是jasmine测试框架， 所以还要声明karma-jasmine。在远端Travis服务上， 我们不需要autoWatch， 否则任务无法结束，
   设置autoWatch为false， 浏览器测试完毕后需要关闭， 所以设置singleRun为true。
 
 (4)coverage遍历的文件夹不清楚怎么写？
 
（5)若executed 执行全部成功将不会报错npm的错，且process code 0,否则process code 1

(6)在files添加coverage的路径有错误   ?
FATAL ERROR: CALL_AND_RETRY_LAST Allocation failed - JavaScript heap out of memory
-------尝试function在外面导入--不行
 

相关知识的总结：
前端让集成ci跑起来 http://annn.me/frontend-ci-cd/
karma和Jenkins进行持续集成单元测试 http://powertech.iteye.com/blog/2051387
Karma与Jenkins-CI集成 http://www.shenyanchao.cn/blog/2013/04/01/run-karma-in-jenkins-ci/
使用Karma来驱动mocha测试 http://www.shenyanchao.cn/blog/2013/03/27/use-karma-to-run-mocha-test/
前端自动化单元测试以及coverage可能出现的错误 http://www.51testing.com/html/70/n-3720170.html
前端自动化测试Jasmine+Karma+TravisCI实践 https://github.com/nupthale/jasmine_karma_travis
聊一聊前端自动化测试 https://segmentfault.com/a/1190000004558796

###配置Karma.conf.js文件###
   必须保证：
   singleRun = true;
   只有这样，才能保证运行Test后，浏览器自动退出，不影响下次执行。
   在Jenkins中，也许你想查看测试结果，这个时候可以借助junit reporter。
   reporters = ['junit'];
   junitReporter = {
         outputFile: 'test-results.xml'
   };
   
  reporters = ['coverage'];

代码覆盖率：
preprocessors = {
    'src/*.js': 'coverage'
};
coverageReporter = {
    type : 'cobertura',
    dir : 'coverage/'
};
这里，reporters指出了要生成coverage报告。preprocessors指明了要统计覆盖率的源码。coverageReporter里，
指明type为cobertura，dir则是报告路径。type用多种选择，其中cobertura为Jenkins专属的。
  
本地开发时，需要将singleRun=false,也就是说执行完测试之后不退出。只有在CI环境下才用true。
新版的Karma几乎所有的工具都需要插件支持

会发现代码覆盖率无法正常检测了。即使你注释掉某个函数的测试用例，代码覆盖率仍旧是100%。这就是前文提到的，
如果使用karma-coverage检测Webpack打包后的代码，就会出现这种情况。所以这里我们需要使用其它办法来检测代码覆盖率。


  
 const webpackConfig = require('./webpack.config.js');

module.exports = function (config)
{
    config.set({
                   basePath  : '../',
                   frameworks: ['mocha'],
        
                   reporters: ['dots', 'junit', 'coverage'],
        
                   junitReporter: {
                       //outputDir: 'junit-report/',
                       outputFile: 'test-results.xml'
                   },
        
                   coverageReporter: {
                       //type: 'cobertura',
                       dir : 'coverage/',
                       reporters: [
                       {
                           type: 'text-summary'
                       }, {
                           type: 'cobertura'
                       }]
                   },
        
                   exclude            : ['karma.conf.js'],
                   port               : 9876,
                   colors             : true,
                   logLevel           : config.LOG_DEBUG,
                   autoWatch          : true,
                   browsers           : ['Chrome'],
                   singleRun          : false,
                   autoWatchBatchDelay: 3000,
        
                   files: [
                       './test/**/*Spec.js',
                       './app/**/**/*.js'
                   ],
        
                   loader: 'babel-loader',
        
                   preprocessors: {
                       './app/**/**/*.js': ['coverage'],
                       './app/**/*.js': ['coverage'],
                       './test/**/*Spec.js': ['webpack']
                   },
        
                   webpack: webpackConfig(),
        
                   webpackMiddleware: {
                       noInfo: true
                   },
        
                   captureTimeout: 20000,
        
                   plugins: [
                       'karma-mocha',
                       'karma-chrome-launcher',
                       'karma-junit-reporter',
                       'karma-coverage',
                       'karma-webpack'
                   ]
               });
};
  

file--coverage:

01 03 2018 18:17:24.025:DEBUG [preprocessor.coverage]: Processing "/Users/fengxiaolan/Eugene/xcederWeb/app/views/zxcvbnLoader.js".
Failed to parse file: /Users/fengxiaolan/Eugene/xcederWeb/app/views/zxcvbnLoader.js
01 03 2018 18:17:24.025:ERROR [preprocessor.coverage]: Line 1: Unexpected token
  at /Users/fengxiaolan/Eugene/xcederWeb/app/views/zxcvbnLoader.js
01 03 2018 18:17:24.025:DEBUG [preprocessor.coverage]: Processing "/Users/fengxiaolan/Eugene/xcederWeb/app/xcederResult.js".
Failed to parse file: /Users/fengxiaolan/Eugene/xcederWeb/app/xcederResult.js
01 03 2018 18:17:24.025:ERROR [preprocessor.coverage]: Line 1: Unexpected token


'./app/**/**/*.js': ['webpack','coverage']出错：

<--- Last few GCs --->

FATAL ERROR: CALL_AND_RETRY_LAST Allocation failed - JavaScript heap out of memory
  117414 ms: Mark-sweep 1077.1 (1434.1) -> 1076.9 (1434.1) MB, 672.5 / 0.0 ms [allocation failure] [GC in old space requested].
 1: node::Abort() [/usr/local/bin/node]
  118066 ms: Mark-sweep 1076.9 (1434.1) -> 1076.9 (1434.1) MB, 651.8 / 0.0 ms [allocation failure] [GC in old space requested].
 2: node::FatalException(v8::Isolate*, v8::Local<v8::Value>, v8::Local<v8::Message>) [/usr/local/bin/node]
  118729 ms: Mark-sweep 1076.9 (1434.1) -> 1090.7 (1403.1) MB, 662.4 / 0.0 ms [last resort gc].
 3: v8::internal::V8::FatalProcessOutOfMemory(char const*, bool) [/usr/local/bin/node]
  119395 ms: Mark-sweep 1090.7 (1403.1) -> 1104.8 (1403.1) MB, 665.8 / 0.0 ms [last resort gc].
 4: v8::internal::Factory::NewTransitionArray(int) [/usr/local/bin/node]


<--- JS stacktrace --->

 5: v8::internal::TransitionArray::Insert(v8::internal::Handle<v8::internal::Map>, v8::internal::Handle<v8::internal::Name>, v8::internal::Handle<v8::internal::Map>, v8::internal::SimpleTransitionFlag) [/usr/local/bin/node]
==== JS stack trace =========================================

Security context: 0x25707cecfb51 <JS Object>
 6: v8::internal::Map::CopyReplaceDescriptors(v8::internal::Handle<v8::internal::Map>, v8::internal::Handle<v8::internal::DescriptorArray>, v8::internal::Handle<v8::internal::LayoutDescriptor>, v8::internal::TransitionFlag, v8::internal::MaybeHandle<v8::internal::Name>, char const*, v8::internal::SimpleTransitionFlag) [/usr/local/bin/node]
    1: node [/Users/fengxiaolan/Eugene/xcederWeb/node_modules/webpack/node_modules/webpack-sources/lib/OriginalSource.js:~51] [pc=0x30e949166812] (this=0x1fe5021a27b9 <a Source with map 0x3dcf9d2bbc61>,options=0x23875c7b0181 <an Object with map 0x2e80fcd1d171>)
 7: v8::internal::Map::CopyAddDescriptor(v8::internal::Handle<v8::internal::Map>, v8::internal::Descriptor*, v8::internal::TransitionFlag) [/usr/local/bin/node]
    2: node [/Users/fengxiaolan/Eugene/xcederWeb/node_modules/webpack/node_modules/webpack-sources/lib/ReplaceSource.js:~73] [pc=0x30e9...

 8: v8::internal::Map::CopyWithField(v8::internal::Handle<v8::internal::Map>, v8::internal::Handle<v8::internal::Name>, v8::internal::Handle<v8::internal::FieldType>, v8::internal::PropertyAttributes, v8::internal::Representation, v8::internal::TransitionFlag) [/usr/local/bin/node]
 9: v8::internal::Map::TransitionToDataProperty(v8::internal::Handle<v8::internal::Map>, v8::internal::Handle<v8::internal::Name>, v8::internal::Handle<v8::internal::Object>, v8::internal::PropertyAttributes, v8::internal::Object::StoreFromKeyed) [/usr/local/bin/node]
10: v8::internal::LookupIterator::PrepareTransitionToDataProperty(v8::internal::Handle<v8::internal::JSObject>, v8::internal::Handle<v8::internal::Object>, v8::internal::PropertyAttributes, v8::internal::Object::StoreFromKeyed) [/usr/local/bin/node]
11: v8::internal::Object::AddDataProperty(v8::internal::LookupIterator*, v8::internal::Handle<v8::internal::Object>, v8::internal::PropertyAttributes, v8::internal::Object::ShouldThrow, v8::internal::Object::StoreFromKeyed) [/usr/local/bin/node]
12: v8::internal::Runtime::SetObjectProperty(v8::internal::Isolate*, v8::internal::Handle<v8::internal::Object>, v8::internal::Handle<v8::internal::Object>, v8::internal::Handle<v8::internal::Object>, v8::internal::LanguageMode) [/usr/local/bin/node]
13: v8::internal::Runtime_SetProperty(int, v8::internal::Object**, v8::internal::Isolate*) [/usr/local/bin/node]
14: 0x30e9445092a7
15: 0x30e949166812

Process finished with exit code 134 (interrupted by signal 6: SIGABRT)











coverage预处理和files对应
Uncaught SyntaxError: Unexpected number



