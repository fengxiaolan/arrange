登录的圆角，
登录的paddingtop
注册新用户的是什么button
验证后的横线颜色
checkbox的三种状态



xi: 浏览器收缩的时候位置下降
me: letterSpacing不起效果
    鼠标悬停有过渡效果



1.window.js
extends window就是利用它重写的方法

2.
isFullWidthCell={this.state.isFullWidthCell}
ullWidthCellRenderer={this.state.fullWidthCellRenderer}不能与cellRenderer:  'agGroupCellRenderer',一起公用（在全宽下面的话）？
行组还是有问题，嵌套，且语法不对  getNodeChildDetails


3.svg sprites
viewBox="x, y, width, height"  // x:左上角横坐标，y:左上角纵坐标，width:宽度，height:高度
更形象的解释就是：SVG就像是我们的显示器屏幕，viewBox就是截屏工具选中的那个框框，最终的呈现就是把框框中的截屏内容再次在显示器中全屏显示！

图标图形整合在一起，实际呈现的时候准确显示特定图标？

自动导入
// requires and returns all modules that match
const requireAll = requireContext => requireContext.keys().map(requireContext);

// import all svg
const req = require.context('./assets/svg', true, /\.svg$/);
requireAll(req);

可以产生symbol
只有我们自己引入的 svg 文件需要经过 svg-sprite-loader，那么就将这些 svg 统一放到一个目录下，我这里放到了 src/assets/svg/ ，
再修改 loader 配置。
我们要接触的是一个叫 svg-sprite-loader 的插件，用来根据导入的 svg 文件自动生成 symbol 标签并插入 html，

在SVG中<use>可以在任何地方复用svg文件中定定义的的形，包括<g>和 <symbol>已经<defs>
在使用 use 时，它必须要有一个id，这样 use 通过xlink:href的值找到该形状的引用。注意，一定要在前面加一个#，这样才能引用ID成功。

 svg中viewBox是控制起点，style是控制缩放，use中可以控制本身引用的大小


import React, {PureComponent} from 'react'
import PropTypes from 'prop-types'

import {Step, Stepper, StepLabel, StepContent} from 'material-ui/Stepper';
import FlatButton from 'material-ui/FlatButton';
import RaisedButton from 'material-ui/RaisedButton';
import FormsyText from 'formsy-material-ui/lib/FormsyText';
import {blue500} from 'material-ui/styles/colors';
import FontIcon from 'material-ui/FontIcon'

import {getTranslateRecords, translate} from '../services/translator'

import md5 from './md5'
import ErrorNotice from './controls/errorNotice'
import LoadingButton from './controls/loadingButton';
import PasswordInput from './controls/passwordInput';

import TextInput from './controls/textInput';
import {WHITE_FAINT, WHITE, GREY_700, GREY_54, GREY_82} from '../colors';

import {USER_OTP, USER_PWD, requestOTPAction, resetPasswordAction} from '../model/loginActions'

export default class ResetPasswordPanel extends PureComponent {
    static propTypes = {
        theme: PropTypes.string.isRequired
    };
    
    state = {
        isDemo    : false,
        finished  : false,
        submitTime: 0,
        alertMsg  : '',
        stepIndex : 0
    };
    
    handleNext = () =>
    {

            const {stepIndex} = this.state;
           
            if(stepIndex < 2) {
                this.setState({
                                  stepIndex: stepIndex + 1,
                                  finished : stepIndex >= 2
                              });
            }
        

            // if (finished)
            // {
            //    // this.refs.form.submit();
            //     this.props.close;
            // }

            console.log(this.state.stepIndex)
        console.log(this.state.finished)
        
    };
    
    handlePrev = () =>
    {
        const {stepIndex} = this.state;
        
        this.setState({
               stepIndex: stepIndex - 1,
               finished : false
        });
       
    };
    
    enableSubmitButton(canSubmit, isSubmitting, stateCallback)
    {
        let {alertMsg, submitTime} = this.state;
        
        if (isSubmitting)
        {
            alertMsg = '';
            submitTime = Date.now();
        }
        
        this.setState({
                          canSubmit,
                          isSubmitting,
                          alertMsg,
                          submitTime
                      }, stateCallback);
    }
    
    requestToken = (form) =>
    {
        const {email} = form;
        
        this.enableSubmitButton(false, true);
        
        this.setState({email}, () =>
        {
            this.props.requestOTPAction(email);
        });
    };
    
    resetPassword = (form) =>
    {
        form.password = md5(form.password, true);
        
        this.enableSubmitButton(false, true, () =>
        {
            this.props.resetPasswordAction(this.state.email, null, form.password, form.token);
        });
    };
    
    moveToNextPage()
    {
        const stepIndex = this.state.stepIndex;
        
        this.setState({
                          stepIndex: stepIndex + 1,
                          finished : stepIndex >= 2
                      });
        
    }
    
    componentWillReceiveProps(nextProps)
    {
        const {resetResult, OTPResult} = nextProps;

        let result;

        if (OTPResult.timestamp >= this.state.submitTime)
        {
            result = OTPResult;
        }
        else if (resetResult.timestamp >= this.state.submitTime)
        {
            result = resetResult;
        }

        if (result)
        {
            this.enableSubmitButton(true, false);

            if (!result.isFail())
            {
                this.moveToNextPage();
            }
            else
            {
                this.setState({alertMsg: result.getErrorMsg()})
            }
        }
    }
    
    
    render()
    {
        const {finished, stepIndex} = this.state,
            translates = getTranslateRecords(),
            
            backBtn = {
                onTouchTap: this.handlePrev,
                className : "center",
                type      : "submit",
                style     : {
                    float         : 'left',
                    display       : stepIndex === 0  ?  'none' : 'initial' ,
                    marginRight   : 11,
                    minWidth      : 152
                },
                label     : translates.BACK,
                labelColor: GREY_700,
                buttonStyle: {
                    backgroundColor : GREY_54
                }
            },
            
            stepperBtn = {
                onTouchTap             : this.handleNext,
                className              : "center",
                type                   : "submit",
                //fullWidth              : stepIndex === 0 ? true : false,
                style                  : {
                    float          : 'right',
                    backgroundColor: GREY_82,
                    minWidth       : stepIndex === 0 ? 316 : 152,
                },
                label                  : finished ? translates.FINISH : translates.NEXT,
                labelColor             : WHITE,
                disabledBackgroundColor: GREY_54,
                disabledLabelColor     : WHITE,
                disabled               : !this.state.canSubmit
            },
            
            steps = {
                0: <Formsy.Form autoComplete="off"
                                ref="form"
                                disabled={this.state.isSubmitting}
                                onValidSubmit={this.requestToken}
                                onValid={() => this.enableSubmitButton(true)}
                                onInvalid={() => this.enableSubmitButton(false)}>
                    
                    <TextInput
                        name="email"
                        type="email"
                        validations="isEmail"
                        validationError={translates.EMAIL_ERROR}
                        hintText={translates.EMAIL}
                        style={{marginTop: 20}}
                    />
                
                
                </Formsy.Form>,
                
                1: <Formsy.Form autoComplete="off"
                                ref="form"
                                disabled={this.state.isSubmitting}
                                onValidSubmit={this.resetPassword}
                                onValid={() => this.enableSubmitButton(true)}
                                onInvalid={() => this.enableSubmitButton(false)}>
                    
                    <TextInput
                        name="token"
                        type="number"
                        validations="isNumeric,isLength:7"
                        validationError={translates.RESET_TOKEN_ERROR}
                        hintText={translates.RESET_TOKEN_HOLDER}
                        style={{marginTop: 20}}
                    />
    
                    {/*<PasswordInput strengthCheck={true}*/}
                                   {/*style={{marginTop: 20}}*/}
                                   {/*hintText={translates.RESET_NEW_PASSWORD}*/}
                    {/*/>*/}
                    
                    {/*<TextInput*/}
                        {/*name="passwordConfirm"*/}
                        {/*type="password"*/}
                        {/*validations="equalsField:password"*/}
                        {/*validationError={translates.PASSWORD_CONFIRM_ERROR}*/}
                        {/*hintText={translates.RESET_CONFIRM_PASSWORD}*/}
                        {/*style={{marginTop: 12}}*/}
                    {/*/>*/}
                </Formsy.Form>,
    
                2: <Formsy.Form autoComplete="off"
                                ref="form"
                                disabled={this.state.isSubmitting}
                                onValidSubmit={this.resetPassword}
                                onValid={() => this.enableSubmitButton(true)}
                                onInvalid={() => this.enableSubmitButton(false)}>
                    
                    <TextInput
                        name="passwordConfirm"
                        type="password"
                        validations="equalsField:password"
                        validationError={translates.PASSWORD_CONFIRM_ERROR}
                        hintText={translates.RESET_CONFIRM_PASSWORD}
                        style={{marginTop: 12}}
                    />
    
                    <PasswordInput
                            style={{marginTop: 20}}
                            hintText={translates.RESET_NEW_PASSWORD}
                    />
    
                    <TextInput
                        name="passwordConfirm"
                        type="password"
                        validations="equalsField:password"
                        validationError={translates.PASSWORD_CONFIRM_ERROR}
                        hintText={translates.RESET_CONFIRM_PASSWORD}
                        style={{marginTop: 12}}
                    />
                </Formsy.Form>
                
            },
            
            stepperStyle = {
                marginTop: 30
            },
            
            stepStyle = {
                height: 50
            },
            
            stepLabelStyle = {
                fontSize: 12,
                paddingLeft: 2,
                height  : 50
            },
    
            connector = {
                wrapper: {
                    marginLeft: 20
                },
                line: {
                    minHeight: 16
                }
            }
        
        ;
        
        return (
            <div>
                <FlatButton label={translates.BACK_LOGIN}
                            labelStyle={{
                                textTransform: 'none',
                                color        : blue500,
                                fontSize     : 12,
                                lineHeight   : '24px',
                                paddingLeft  : 0,
                                paddingRight : 5
                            }}
                            onTouchTap={this.props.onClose}
                            icon={<FontIcon className='fa fa-chevron-left'
                                            style={{fontSize: 16, lineHeight: '24px', marginLeft: 7, marginRight: 12}}
                            ></FontIcon>}
                            style={{height: 24}}
                            hoverColor={WHITE_FAINT}
                />
                
                <Stepper activeStep={stepIndex} orientation="vertical" style={stepperStyle} >
                    <Step style={stepStyle}>
                        <StepLabel style={stepLabelStyle}
                                   iconContainerStyle={{color: WHITE}}
                        >{translates.RESET_STEP1}</StepLabel>
                    </Step>
                    
                    <Step style={stepStyle}>
                        <StepLabel style={stepLabelStyle}
                                   iconContainerStyle={{color: WHITE}}
                        >{translates.RESET_STEP2}</StepLabel>
                    </Step>
                    
                    <Step style={stepStyle}>
                        <StepLabel style={stepLabelStyle}>{translates.RESET_STEP3}</StepLabel>
                    </Step>
                </Stepper>
                
                <div>
                    {steps[stepIndex]}
                    
                    <ErrorNotice>{this.state.alertMsg ? translate('RESET_ERROR', this.state.alertMsg) :
                                  ''}</ErrorNotice>
                    
                    <div style={{marginTop: 20, overflow: 'hidden'}}>
                        
                        {/*<RaisedButton className="center"*/}
                        {/*fullWidth={true}*/}
                        {/*//style={{float: 'left', display: stepIndex === 0 || finished ? 'none' : 'initial'}}*/}
                        {/*disabled={this.state.isSubmitting}*/}
                        {/*label={translates.BACK}*/}
                        {/*onTouchTap={this.handlePrev}/>*/}
                        
                        <LoadingButton isFlatButton={false}
                                       button={backBtn}/>
                        
                        <LoadingButton isFlatButton={false}
                                       indicator={{show: this.state.isSubmitting, left: -8}}
                                       button={stepperBtn}/>
                    
                    </div>
                </div>
            
            </div>
        );
    }
}



















/**
 * Created by Mac on 2018/1/30.
 */
import React, {PureComponent} from 'react';
import PropTypes from "prop-types";

import Formsy from 'formsy-react';
import FormsyText from 'formsy-material-ui/lib/FormsyText';

import IconButton from 'material-ui/IconButton';
import FontIcon from 'material-ui/FontIcon';
import debounce from 'lodash/debounce';

import {WHITE, RED, WHITE_DARK, GREY_97, GREEN_500, BLUE, GREY_189} from '../../colors';

export default class TextInput extends PureComponent {
    state = {
        value: this.props.value || '',
        focus: false,
    };
    
    onFocus = () =>
    {
        this.setState({
                          focus: true
                      });
        
    };
    
    debounceOnBlur = debounce(() =>
                              {
                                  if (this.state.value.length === 0)
                                  {
                                      this.setState({value: ''});
                                  }
                                  
                                  this.setState({focus: false});
                              }
        , 200);
    
    handleChange = (e) =>
    {
        this.setState({value: e.target.value});
    };
    
    handleClear = () =>
    {
        if (this.state.value)
        {
            this.setState({
                              value: ''
                          });
        }
    };
    
    render()
    {
        const {style, hintText, name, disable, validations, validationError} = this.props,
            
            clearBtnStyle = {
               clearStyle : {
                    position: 'absolute',
                    float   : 'right',
                    width   : 12,
                    height  : 12,
                    padding : 0,
                    bottom  : 16,
                    right   : 1
                },
    
                clearIconStyle : {
                    fontSize       : 9,
                    fontWeight     : 'bold',
                    color          : WHITE,
                    textAlign      : 'center',
                    backgroundColor: RED,
                    borderRadius   : '50%',
                    width          : 12,
                    height         : 12,
                    lineHeight     : '12px'
                }
            },
            
            clearBtn = (this.state.value && this.state.focus) ? <IconButton style={clearBtnStyle.clearStyle }
                                                                            iconStyle={clearBtnStyle.clearIconStyle}
                                                                            onClick={this.handleClear}
            >
                <FontIcon className="material-icons"
                > clear </FontIcon>
            </IconButton> : "",
            
            erricon = <FontIcon className="fa fa-exclamation-triangle"
                                style={{fontSize: 12, color: 'rgba(244, 67, 54, 1)', float: 'right'}}/>
        
        ;
        
        return <div style={{position: 'relative'}}>
            <FormsyText
                fullWidth={true}
                value={this.state.value}
                name={name}
                required
                hintText={hintText}
                hintStyle={{fontSize: 13, color: GREY_97}}
                disabled={disable}
                validationColor={GREEN_500}
                underlineFocusStyle={{backgroundColor: BLUE}}
                underlineStyle={{backgroundColor: GREY_97}}
                inputStyle={{fontSize: 13, color: GREY_189}}
                validations={validations}
                validationError={validationError}
                style={style}
                onFocus={this.onFocus}
                onBlur={this.debounceOnBlur}
                onChange={this.handleChange}
            />
            {clearBtn}
        </div>;
    }
}
